zip_choropleth(outputFrame,
county_zoom = '21111',
title = 'Building Permits in Louisville',
legend = '# Permits')
})
}
shinyApp(ui = ui, server = server)
###################################
#                                 #
#     NP Reporting Shiny App      #
#     Author: Robert Kahne        #
#                                 #
###################################
library(shiny)
library(choroplethr)
library(choroplethrZip)
####################################
#              Fuctions            #
####################################
nextYearTuple <- function(aDate){
temp <- as.POSIXlt(aDate)
temp$year<-temp$year+1
temp<-as.Date(temp)
return(c(aDate,temp))
}
####################################
#              Plumbing            #
####################################
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
PermitsZips<-unique(as.character(CodesAndRegsPermits$ZipCode))
PermitsZips<-as.character(PermitsZips)
dateIterable <- as.Date('2004-01-01')
YearlyZips <- list()
for(i in 1:11){
YearTuple<-nextYearTuple(dateIterable)
YearlyZips[[i]]<-list(subset(CodesAndRegsPermits, IssueDate>=YearTuple[1]&IssueDate<YearTuple[2],select = ZipCode)$ZipCode)
dateIterable <- as.POSIXlt(dateIterable)
dateIterable$year<-dateIterable$year+1
dateIterable<-as.Date(dateIterable)
}
SumYearlyZips<-list()
for (i in 1:length(YearlyZips)){
SumYearlyZips[[i]]<-lapply(PermitsZips,function(j){length(which(as.character(unlist(YearlyZips[[i]]))==j))})
}
SumYearlyZips<-lapply(SumYearlyZips,unlist)
PermitsZipYear<-data.frame(PermitsZips,SumYearlyZips)
colnames(PermitsZipYear)<-c('Zip','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014')
LouisvilleZips <- data.frame(c('40212','40211','40216','40258','40272','40203','40210','40208','40215','40214','40118','40209','40202','40206','40204','40217',
'40213','40219','40229','40205','40218','40225','40228','40291','40220','40299','40023','40245','40059','40241','40223','40243',
'40242','40025','40222','40207','40177','40231','40041'))
colnames(LouisvilleZips)<-'region'
LouisvilleZips<-merge(LouisvilleZips,PermitsZipYear, by.x='region',by.y='Zip', all.x=TRUE)
LouisvilleZips[is.na(LouisvilleZips)]<-0
####################################
#              Set - Up            #
####################################
ui<-fluidPage(
# Application title
headerPanel("Louisville Building Permits by Year"),
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput("Year",
"Year:",
c('2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014'))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("mainPlot")
)
)
server<-function(input, output) {
output$mainPlot <- renderPlot({
outputFrame<-data.frame(LouisvilleZips$region,LouisvilleZips[input$Year])
colnames(outputFrame)<-c('region','value')
zip_choropleth(outputFrame,
county_zoom = '21111',
title = c('Building Permits in Louisville ',input$Year),
legend = '# Permits')
})
}
shinyApp(ui = ui, server = server)
###################################
#                                 #
#     NP Reporting Shiny App      #
#     Author: Robert Kahne        #
#                                 #
###################################
library(shiny)
library(choroplethr)
library(choroplethrZip)
####################################
#              Fuctions            #
####################################
nextYearTuple <- function(aDate){
temp <- as.POSIXlt(aDate)
temp$year<-temp$year+1
temp<-as.Date(temp)
return(c(aDate,temp))
}
####################################
#              Plumbing            #
####################################
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
PermitsZips<-unique(as.character(CodesAndRegsPermits$ZipCode))
PermitsZips<-as.character(PermitsZips)
dateIterable <- as.Date('2004-01-01')
YearlyZips <- list()
for(i in 1:11){
YearTuple<-nextYearTuple(dateIterable)
YearlyZips[[i]]<-list(subset(CodesAndRegsPermits, IssueDate>=YearTuple[1]&IssueDate<YearTuple[2],select = ZipCode)$ZipCode)
dateIterable <- as.POSIXlt(dateIterable)
dateIterable$year<-dateIterable$year+1
dateIterable<-as.Date(dateIterable)
}
SumYearlyZips<-list()
for (i in 1:length(YearlyZips)){
SumYearlyZips[[i]]<-lapply(PermitsZips,function(j){length(which(as.character(unlist(YearlyZips[[i]]))==j))})
}
SumYearlyZips<-lapply(SumYearlyZips,unlist)
PermitsZipYear<-data.frame(PermitsZips,SumYearlyZips)
colnames(PermitsZipYear)<-c('Zip','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014')
LouisvilleZips <- data.frame(c('40212','40211','40216','40258','40272','40203','40210','40208','40215','40214','40118','40209','40202','40206','40204','40217',
'40213','40219','40229','40205','40218','40228','40291','40220','40299','40023','40245','40095','40241','40223','40243',
'40242','40025','40222','40207','40177','40231','40041','40280'))
colnames(LouisvilleZips)<-'region'
LouisvilleZips<-merge(LouisvilleZips,PermitsZipYear, by.x='region',by.y='Zip', all.x=TRUE)
LouisvilleZips[is.na(LouisvilleZips)]<-0
####################################
#              Set - Up            #
####################################
ui<-fluidPage(
# Application title
headerPanel("Louisville Building Permits by Year"),
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput("Year",
"Year:",
c('2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014'))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("mainPlot")
)
)
server<-function(input, output) {
output$mainPlot <- renderPlot({
outputFrame<-data.frame(LouisvilleZips$region,LouisvilleZips[input$Year])
colnames(outputFrame)<-c('region','value')
zip_choropleth(outputFrame,
county_zoom = '21111',
title = c('Building Permits in Louisville ',input$Year),
legend = '# Permits')
})
}
shinyApp(ui = ui, server = server)
PermitsZipYear
PermitsZipYear$Zip[1]
PermitsZipYear$Zip<-as.character(PermitsZipYear)
PermitsZipYear$Zip<-as.character(PermitsZipYear$Zip)
PermitsZipYear$2004[1]
PermitsZipYear$2004[5]
View(PermitsZipYear)
PermitsZipYear[2004][5]
PermitsZipYear['2004'][5]
PermitsZipYear
PermitsZipYear$2004
PermitsZipYear$'2004'
PermitsZipYear$'2004'[1]
##################################################
#                                                #
#     Louisville Building Permits Shiny App      #
#     Author: Robert Kahne                       #
#                                                #
##################################################
library(shiny)
library(choroplethr)
library(choroplethrZip)
####################################
#              Fuctions            #
####################################
nextYearTuple <- function(aDate){
temp <- as.POSIXlt(aDate)
temp$year<-temp$year+1
temp<-as.Date(temp)
return(c(aDate,temp))
}
####################################
#              Plumbing            #
####################################
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
PermitsZips<-unique(as.character(CodesAndRegsPermits$ZipCode))
PermitsZips<-as.character(PermitsZips)
dateIterable <- as.Date('2004-01-01') # There is some data for 2003, but it is partial, so we will start in 2004
YearlyZips <- list()
# Create a list of all the Permits for each year for which we have data (return zip code)
for(i in 1:11){ # 1:11 because that is the number of years from 2004-2014
YearTuple<-nextYearTuple(dateIterable)
YearlyZips[[i]]<-list(subset(CodesAndRegsPermits, IssueDate>=YearTuple[1]&IssueDate<YearTuple[2],select = ZipCode)$ZipCode)
dateIterable <- as.POSIXlt(dateIterable)
dateIterable$year<-dateIterable$year+1
dateIterable<-as.Date(dateIterable)
}
# Sum up the previous list BY zip
SumYearlyZips<-list()
for (i in 1:length(YearlyZips)){
SumYearlyZips[[i]]<-lapply(PermitsZips,function(j){length(which(as.character(unlist(YearlyZips[[i]]))==j))})
}
SumYearlyZips<-lapply(SumYearlyZips,unlist)
# Frame up the list so we can work with it, give it appropriate headers
PermitsZipYear<-data.frame(PermitsZips,SumYearlyZips)
colnames(PermitsZipYear)<-c('Zip','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014')
PermitsZipYear$Zip<-as.character(PermitsZipYear$Zip)
# choroplethr does not work well unless we have ALL the zips, with 0s for those which DNE.  So, we need to fix up our frame.
LouisvilleZips <- data.frame(c('40212','40211','40216','40258','40272','40203','40210','40208','40215','40214','40118','40209','40202','40206','40204','40217',
'40213','40219','40229','40205','40218','40228','40291','40220','40299','40023','40245','40059','40241','40223','40243',
'40242','40025','40222','40207','40177','40231','40041','40280'))
colnames(LouisvilleZips)<-'region'
LouisvilleZips<-merge(LouisvilleZips,PermitsZipYear, by.x='region',by.y='Zip', all.x=TRUE)
LouisvilleZips[is.na(LouisvilleZips)]<-0
####################################
#              Set - Up            #
####################################
ui<-fluidPage(
# Application title
headerPanel("Louisville Building Permits by Year"),
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput("Year",
"Year:",
c('2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014'))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("mainPlot")
)
)
server<-function(input, output) {
output$mainPlot <- renderPlot({
outputFrame<-data.frame(LouisvilleZips$region,LouisvilleZips[input$Year])
colnames(outputFrame)<-c('region','value')
zip_choropleth(outputFrame,
county_zoom = '21111',
title = c('Building Permits in Louisville ',input$Year),
legend = '# Permits')
})
}
shinyApp(ui = ui, server = server)
##################################################
#                                                #
#     Louisville Building Permits Shiny App      #
#     Author: Robert Kahne                       #
#                                                #
##################################################
library(shiny)
library(choroplethr)
library(choroplethrZip)
####################################
#              Fuctions            #
####################################
nextYearTuple <- function(aDate){
temp <- as.POSIXlt(aDate)
temp$year<-temp$year+1
temp<-as.Date(temp)
return(c(aDate,temp))
}
####################################
#              Plumbing            #
####################################
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
PermitsZips<-unique(as.character(CodesAndRegsPermits$ZipCode))
PermitsZips<-as.character(PermitsZips)
dateIterable <- as.Date('2004-01-01') # There is some data for 2003, but it is partial, so we will start in 2004
YearlyZips <- list()
# Create a list of all the Permits for each year for which we have data (return zip code)
for(i in 1:11){ # 1:11 because that is the number of years from 2004-2014
YearTuple<-nextYearTuple(dateIterable)
YearlyZips[[i]]<-list(subset(CodesAndRegsPermits, IssueDate>=YearTuple[1]&IssueDate<YearTuple[2],select = ZipCode)$ZipCode)
dateIterable <- as.POSIXlt(dateIterable)
dateIterable$year<-dateIterable$year+1
dateIterable<-as.Date(dateIterable)
}
# Sum up the previous list BY zip
SumYearlyZips<-list()
for (i in 1:length(YearlyZips)){
SumYearlyZips[[i]]<-lapply(PermitsZips,function(j){length(which(as.character(unlist(YearlyZips[[i]]))==j))})
}
SumYearlyZips<-lapply(SumYearlyZips,unlist)
# Frame up the list so we can work with it, give it appropriate headers
PermitsZipYear<-data.frame(PermitsZips,SumYearlyZips)
colnames(PermitsZipYear)<-c('Zip','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014')
PermitsZipYear$Zip<-as.character(PermitsZipYear$Zip)
# choroplethr does not work well unless we have ALL the zips, with 0s for those which DNE.  So, we need to fix up our frame.
LouisvilleZips <- data.frame(c('40212','40211','40216','40258','40272','40203','40210','40208','40215','40214','40118','40209','40202','40206','40204','40217',
'40213','40219','40229','40205','40218','40228','40291','40220','40299','40023','40245','40059','40241','40223','40243',
'40242','40025','40222','40207','40177','40231','40041','40280'))
colnames(LouisvilleZips)<-'region'
LouisvilleZips$region
LouisvilleZips$region[1]
##################################################
#                                                #
#     Louisville Building Permits Shiny App      #
#     Author: Robert Kahne                       #
#                                                #
##################################################
library(shiny)
library(choroplethr)
library(choroplethrZip)
####################################
#              Fuctions            #
####################################
nextYearTuple <- function(aDate){
temp <- as.POSIXlt(aDate)
temp$year<-temp$year+1
temp<-as.Date(temp)
return(c(aDate,temp))
}
####################################
#              Plumbing            #
####################################
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
PermitsZips<-unique(as.character(CodesAndRegsPermits$ZipCode))
PermitsZips<-as.character(PermitsZips)
dateIterable <- as.Date('2004-01-01') # There is some data for 2003, but it is partial, so we will start in 2004
YearlyZips <- list()
# Create a list of all the Permits for each year for which we have data (return zip code)
for(i in 1:11){ # 1:11 because that is the number of years from 2004-2014
YearTuple<-nextYearTuple(dateIterable)
YearlyZips[[i]]<-list(subset(CodesAndRegsPermits, IssueDate>=YearTuple[1]&IssueDate<YearTuple[2],select = ZipCode)$ZipCode)
dateIterable <- as.POSIXlt(dateIterable)
dateIterable$year<-dateIterable$year+1
dateIterable<-as.Date(dateIterable)
}
# Sum up the previous list BY zip
SumYearlyZips<-list()
for (i in 1:length(YearlyZips)){
SumYearlyZips[[i]]<-lapply(PermitsZips,function(j){length(which(as.character(unlist(YearlyZips[[i]]))==j))})
}
SumYearlyZips<-lapply(SumYearlyZips,unlist)
# Frame up the list so we can work with it, give it appropriate headers
PermitsZipYear<-data.frame(PermitsZips,SumYearlyZips)
colnames(PermitsZipYear)<-c('Zip','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014')
PermitsZipYear$Zip<-as.character(PermitsZipYear$Zip)
# choroplethr does not work well unless we have ALL the zips, with 0s for those which DNE.  So, we need to fix up our frame.
LouisvilleZips <- data.frame(c('40212','40211','40216','40258','40272','40203','40210','40208','40215','40214','40118','40209','40202','40206','40204','40217',
'40213','40219','40229','40205','40218','40228','40291','40220','40299','40023','40245','40059','40241','40223','40243',
'40242','40025','40222','40207','40177','40231','40041','40280'))
colnames(LouisvilleZips)<-'region'
LouisvilleZips$region<-as.character(LouisvilleZips$region)
LouisvilleZips<-merge(LouisvilleZips,PermitsZipYear, by.x='region',by.y='Zip', all.x=TRUE)
LouisvilleZips[is.na(LouisvilleZips)]<-0
####################################
#              Set - Up            #
####################################
ui<-fluidPage(
# Application title
headerPanel("Louisville Building Permits by Year"),
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput("Year",
"Year:",
c('2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014'))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("mainPlot")
)
)
server<-function(input, output) {
output$mainPlot <- renderPlot({
outputFrame<-data.frame(LouisvilleZips$region,LouisvilleZips[input$Year])
colnames(outputFrame)<-c('region','value')
zip_choropleth(outputFrame,
county_zoom = '21111',
title = c('Building Permits in Louisville ',input$Year),
legend = '# Permits',
num_colors = 1)
})
}
shinyApp(ui = ui, server = server)
c('Building Permits in Louisville ',input$Year)
c('Building Permits in Louisville ','2004')
cat('Building Permits in Louisville ','2004')
##################################################
#                                                #
#     Louisville Building Permits Shiny App      #
#     Author: Robert Kahne                       #
#                                                #
##################################################
library(shiny)
library(choroplethr)
library(choroplethrZip)
####################################
#              Fuctions            #
####################################
nextYearTuple <- function(aDate){
temp <- as.POSIXlt(aDate)
temp$year<-temp$year+1
temp<-as.Date(temp)
return(c(aDate,temp))
}
####################################
#              Plumbing            #
####################################
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
PermitsZips<-unique(as.character(CodesAndRegsPermits$ZipCode))
PermitsZips<-as.character(PermitsZips)
dateIterable <- as.Date('2004-01-01') # There is some data for 2003, but it is partial, so we will start in 2004
YearlyZips <- list()
# Create a list of all the Permits for each year for which we have data (return zip code)
for(i in 1:11){ # 1:11 because that is the number of years from 2004-2014
YearTuple<-nextYearTuple(dateIterable)
YearlyZips[[i]]<-list(subset(CodesAndRegsPermits, IssueDate>=YearTuple[1]&IssueDate<YearTuple[2],select = ZipCode)$ZipCode)
dateIterable <- as.POSIXlt(dateIterable)
dateIterable$year<-dateIterable$year+1
dateIterable<-as.Date(dateIterable)
}
# Sum up the previous list BY zip
SumYearlyZips<-list()
for (i in 1:length(YearlyZips)){
SumYearlyZips[[i]]<-lapply(PermitsZips,function(j){length(which(as.character(unlist(YearlyZips[[i]]))==j))})
}
SumYearlyZips<-lapply(SumYearlyZips,unlist)
# Frame up the list so we can work with it, give it appropriate headers
PermitsZipYear<-data.frame(PermitsZips,SumYearlyZips)
colnames(PermitsZipYear)<-c('Zip','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014')
PermitsZipYear$Zip<-as.character(PermitsZipYear$Zip)
# choroplethr does not work well unless we have ALL the zips, with 0s for those which DNE.  So, we need to fix up our frame.
LouisvilleZips <- data.frame(c('40212','40211','40216','40258','40272','40203','40210','40208','40215','40214','40118','40209','40202','40206','40204','40217',
'40213','40219','40229','40205','40218','40228','40291','40220','40299','40023','40245','40059','40241','40223','40243',
'40242','40025','40222','40207','40177','40231','40041','40280'))
colnames(LouisvilleZips)<-'region'
LouisvilleZips$region<-as.character(LouisvilleZips$region)
LouisvilleZips<-merge(LouisvilleZips,PermitsZipYear, by.x='region',by.y='Zip', all.x=TRUE)
LouisvilleZips[is.na(LouisvilleZips)]<-0
####################################
#              Set - Up            #
####################################
ui<-fluidPage(
# Application title
headerPanel("Louisville Building Permits by Year"),
# Sidebar with a slider input for number of bins
sidebarPanel(
selectInput("Year",
"Year:",
c('2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014'))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("mainPlot")
)
)
server<-function(input, output) {
output$mainPlot <- renderPlot({
outputFrame<-data.frame(LouisvilleZips$region,LouisvilleZips[input$Year])
colnames(outputFrame)<-c('region','value')
zip_choropleth(outputFrame,
county_zoom = '21111',
title = cat('Building Permits in Louisville, ',input$Year),
legend = '# Permits',
num_colors = 1)
})
}
shinyApp(ui = ui, server = server)
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
View(CodesAndRegsPermits)
as.POSIXlt(IssueDate)$year
as.POSIXlt(CodesAndRegsPermits$IssueDate)$year
a<-unique(as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)
b<-as.Date(a)
a
?sort
sort(a)
b<-lapply(a,function(i){ i == as.POSIXlt(CodesAndRegsPermits$IssueDate)$year})
b<-lapply(a,function(i){ sum(i == as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)})
data.frame(a,unlist(b))
c<-data.frame(a,unlist(b))
a<-sort(a)
b<-lapply(a,function(i){ sum(i == as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)})
c<-data.frame(a,unlist(b))
View(c)
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
uniqueYear<-unique(as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)
uniqueYear<-sort(uniqueYear)
permitsByYear<-lapply(uniqueYear,function(i){ sum(i == as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)})
permitsByYear<-data.frame(uniqueYear,unlist(permitsByYear))
View(permitsByYear)
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
uniqueYear<-unique(as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)
uniqueYear<-sort(uniqueYear)
permitsByYear<-lapply(uniqueYear,function(i){ sum(i == as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)})
permitsByYear<-data.frame(uniqueYear,unlist(permitsByYear))
colnames(permitsByYear)<-c('year','permits')
permitsByYear$year<-2003:2014
CodesAndRegsPermits<-read.csv('CodesAndRegsPermits.csv')
CodesAndRegsPermits$IssueDate <- as.Date(as.character(CodesAndRegsPermits$IssueDate), format='%m/%d/%Y %H:%M')
uniqueYear<-unique(as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)
uniqueYear<-sort(uniqueYear)
permitsByYear<-lapply(uniqueYear,function(i){ sum(i == as.POSIXlt(CodesAndRegsPermits$IssueDate)$year)})
permitsByYear<-data.frame(uniqueYear,unlist(permitsByYear))
colnames(permitsByYear)<-c('year','permits')
permitsByYear$year<-2003:2015
